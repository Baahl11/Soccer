#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Verificaci√≥n de Integraci√≥n del Sistema de Predicci√≥n con Odds API Optimizada

Este script verifica que el sistema principal de predicci√≥n est√© correctamente
integrado con la soluci√≥n optimizada de la API de odds.

Autor: Equipo de Desarrollo
Fecha: Mayo 23, 2025
"""

import sys
import json
import logging
from datetime import datetime
import os
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='prediction_odds_integration.log',
    filemode='w'
)

logger = logging.getLogger('prediction_odds_integration')
console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
logger.addHandler(console)

def banner(text):
    """Mostrar banner de texto"""
    print("\n" + "=" * 70)
    print(f" {text} ".center(70, "="))
    print("=" * 70 + "\n")

def check_config():
    """Verificar que la configuraci√≥n est√° correctamente integrada"""
    banner("VERIFICACI√ìN DE CONFIGURACI√ìN")
    
    try:
        import config
        
        # Verificar que existen las configuraciones requeridas
        required_configs = [
            "API_KEY", 
            "API_BASE_URL", 
            "ODDS_ENDPOINTS", 
            "ODDS_BOOKMAKERS_PRIORITY"
        ]
        
        problems = []
        
        # Verificar existencia de configuraciones
        for conf in required_configs:
            if hasattr(config, conf):
                print(f"‚úÖ Configuraci√≥n encontrada: {conf}")
            else:
                print(f"‚ùå Configuraci√≥n faltante: {conf}")
                problems.append(f"Falta la configuraci√≥n {conf}")
          # Verificar que no existen configuraciones obsoletas
        obsolete_configs = [
            "ODDS_API_KEY", 
            "ODDS_API_URL", 
            "ODDS_API_PROVIDER"
        ]
        
        for conf in obsolete_configs:
            if hasattr(config, conf):
                print(f"‚ùå Configuraci√≥n obsoleta encontrada: {conf}")
                problems.append(f"Configuraci√≥n obsoleta {conf} debe ser eliminada")
            else:
                print(f"‚úÖ No se encontr√≥ configuraci√≥n obsoleta: {conf}")
        
        # Verificar que se usan las nuevas configuraciones
        new_configs = [
            "API_KEY",
            "API_BASE_URL",
            "ODDS_ENDPOINTS"
        ]
        
        for conf in new_configs:
            if hasattr(config, conf):
                print(f"‚úÖ Nueva configuraci√≥n encontrada: {conf}")
            else:
                print(f"‚ùå Nueva configuraci√≥n faltante: {conf}")
                problems.append(f"Falta la nueva configuraci√≥n {conf}")
                
        # Verificar ODDS_ENDPOINTS
        if hasattr(config, "ODDS_ENDPOINTS"):
            required_endpoints = ["pre_match", "live", "bookmakers", "bets"]
            for endpoint in required_endpoints:
                if endpoint in config.ODDS_ENDPOINTS:
                    print(f"‚úÖ Endpoint encontrado: {endpoint}")
                else:
                    print(f"‚ùå Endpoint faltante: {endpoint}")
                    problems.append(f"Falta el endpoint {endpoint} en ODDS_ENDPOINTS")
        
        # Verificar cache config
        if hasattr(config, "CACHE_CONFIG") and "odds" in config.CACHE_CONFIG:
            print(f"‚úÖ Configuraci√≥n de cach√© para odds encontrada")
        else:
            print(f"‚ùå Falta configuraci√≥n de cach√© para odds")
            problems.append("Falta configuraci√≥n de cach√© para odds en CACHE_CONFIG")
        
        return len(problems) == 0, problems
            
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulo de configuraci√≥n: {e}")
        return False, [f"Error de importaci√≥n: {e}"]

def check_optimize_odds_integration():
    """Verificar que el m√≥dulo optimize_odds_integration est√° funcionando"""
    banner("VERIFICACI√ìN DE M√ìDULO DE ODDS")
    
    try:
        import optimize_odds_integration
        
        required_functions = [
            "get_fixture_odds", 
            "normalize_odds_data", 
            "setup_cache", 
            "clear_expired_cache"
        ]
        
        problems = []
        
        for func in required_functions:
            if hasattr(optimize_odds_integration, func):
                print(f"‚úÖ Funci√≥n encontrada: {func}")
            else:
                print(f"‚ùå Funci√≥n faltante: {func}")
                problems.append(f"Falta la funci√≥n {func} en optimize_odds_integration")
        
        # Verificar que el directorio de cach√© existe
        cache_dir = optimize_odds_integration.CACHE_DIR
        if cache_dir.exists():
            print(f"‚úÖ Directorio de cach√© encontrado: {cache_dir}")
        else:
            print(f"‚ùå Directorio de cach√© no encontrado: {cache_dir}")
            problems.append(f"El directorio de cach√© {cache_dir} no existe")
            
        return len(problems) == 0, problems
            
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulo de optimizaci√≥n: {e}")
        return False, [f"Error de importaci√≥n: {e}"]

def test_api_integration():
    """Probar la integraci√≥n con la API"""
    banner("PRUEBA DE INTEGRACI√ìN DE API")
    
    try:
        import optimize_odds_integration
        import config
        
        # Primero configuramos el cach√©
        optimize_odds_integration.setup_cache()
        
        # Intentamos obtener odds para algunos fixtures recientes
        # Estos IDs deber√≠an reemplazarse con fixtures relevantes para su sistema
        test_fixtures = [1208383, 1208384, 1208385]
        
        problems = []
        real_data_count = 0
        
        for fixture_id in test_fixtures:
            print(f"üìä Obteniendo odds para fixture {fixture_id}...")
            odds_data = optimize_odds_integration.get_fixture_odds(
                fixture_id, 
                use_cache=True, 
                force_refresh=False
            )
            
            if odds_data:
                print(f"‚úÖ Datos obtenidos para fixture {fixture_id}")
                
                # Verificar si son datos simulados
                if odds_data.get("simulated", True):
                    print(f"‚ö†Ô∏è Los datos para fixture {fixture_id} son simulados")
                    problems.append(f"Datos simulados para fixture {fixture_id}")
                else:
                    print(f"‚úÖ Datos REALES para fixture {fixture_id}")
                    real_data_count += 1
                    
                # Verificar estructura b√°sica
                required_keys = ["fixture_id", "bookmakers"]
                for key in required_keys:
                    if key not in odds_data:
                        print(f"‚ùå Datos incompletos, falta: {key}")
                        problems.append(f"Estructura de datos incorrecta, falta {key}")
            else:
                print(f"‚ùå Error obteniendo datos para fixture {fixture_id}")
                problems.append(f"No se pudieron obtener datos para fixture {fixture_id}")
        
        # Calcular porcentaje de datos reales
        if test_fixtures:
            real_data_percentage = (real_data_count / len(test_fixtures)) * 100
            print(f"\nüìà Porcentaje de datos reales: {real_data_percentage:.1f}%")
            
            if real_data_percentage < 50:
                problems.append(f"Porcentaje de datos reales muy bajo: {real_data_percentage:.1f}%")
        
        return len(problems) == 0, problems
            
    except Exception as e:
        print(f"‚ùå Error en prueba de integraci√≥n: {e}")
        return False, [f"Error de integraci√≥n: {e}"]

def test_prediction_integration():
    """Verificar integraci√≥n con el sistema de predicci√≥n"""
    banner("INTEGRACI√ìN CON SISTEMA DE PREDICCI√ìN")
    
    try:
        # Intentar importar el sistema de predicci√≥n
        print("‚ö†Ô∏è Esta prueba requiere que el sistema de predicci√≥n est√© implementado")
        print("‚ö†Ô∏è Verificando si podemos importar el m√≥dulo de predicci√≥n...")
        
        prediction_module_exists = False
        prediction_imports_odds = False
        
        # Verificar si existe el archivo de predicciones
        if Path("predictions.py").exists():
            prediction_module_exists = True
            print("‚úÖ M√≥dulo de predicci√≥n encontrado")
            
            # Leer el contenido para buscar importaciones
            with open("predictions.py", "r", encoding="utf-8") as f:
                content = f.read()
                
            if "import optimize_odds_integration" in content or "from optimize_odds_integration" in content:
                prediction_imports_odds = True
                print("‚úÖ El sistema de predicci√≥n importa el m√≥dulo optimizado")
            else:
                print("‚ùå El sistema de predicci√≥n no importa el m√≥dulo optimizado")
        else:
            print("‚ùå No se encontr√≥ el m√≥dulo de predicci√≥n (predictions.py)")
        
        problems = []
        if not prediction_module_exists:
            problems.append("No se encontr√≥ el m√≥dulo de predicci√≥n")
        
        if prediction_module_exists and not prediction_imports_odds:
            problems.append("El sistema de predicci√≥n no importa el m√≥dulo optimizado")
        
        return len(problems) == 0, problems
    except Exception as e:
        print(f"‚ùå Error verificando integraci√≥n de predicci√≥n: {e}")
        return False, [f"Error de verificaci√≥n: {e}"]

def generate_report(results):
    """Generar reporte de integraci√≥n"""
    banner("REPORTE DE INTEGRACI√ìN")
    
    success = all(result[0] for result in results)
    
    print(f"Fecha de verificaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Estado general: {'‚úÖ √âXITO' if success else '‚ùå FALLOS ENCONTRADOS'}")
    print("\nResumen por componente:")
    
    for i, (component, (status, problems)) in enumerate(results.items()):
        print(f"\n{i+1}. {component}: {'‚úÖ OK' if status else '‚ùå PROBLEMAS'}")
        
        if not status:
            print("   Problemas encontrados:")
            for j, problem in enumerate(problems):
                print(f"   {j+1}. {problem}")
    
    if not success:
        print("\n‚ö†Ô∏è ACCIONES RECOMENDADAS:")
        print("1. Revisar y corregir todos los problemas listados")
        print("2. Verificar que todas las dependencias est√°n instaladas")
        print("3. Asegurar que los archivos est√°n en las ubicaciones correctas")
        print("4. Ejecutar este script nuevamente despu√©s de las correcciones")
    else:
        print("\n‚úÖ INTEGRACI√ìN EXITOSA")
        print("El sistema de predicci√≥n est√° correctamente integrado con el m√≥dulo optimizado de odds.")
        print("Recomendaciones para el futuro:")
        print("1. Monitorear el porcentaje de datos reales vs simulados")
        print("2. Realizar esta verificaci√≥n despu√©s de actualizaciones")
        print("3. Considerar ajustes de rendimiento seg√∫n el uso real")
    
    # Guardar reporte en archivo
    report_file = f"integration_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "success": success,
        "components": {
            component: {
                "status": status,
                "problems": problems
            } for component, (status, problems) in results.items()
        }
    }
    
    try:
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2)
        print(f"\nReporte guardado en: {report_file}")
    except Exception as e:
        print(f"\n‚ùå Error guardando reporte: {e}")

def main():
    """Funci√≥n principal"""
    banner("VERIFICACI√ìN DE INTEGRACI√ìN DE SISTEMA DE PREDICCI√ìN")
    print("Verificando la correcta integraci√≥n del sistema optimizado de odds...")
    
    # Ejecutar todas las verificaciones
    results = {
        "Configuraci√≥n": check_config(),
        "M√≥dulo de Odds": check_optimize_odds_integration(),
        "Integraci√≥n de API": test_api_integration(),
        "Sistema de Predicci√≥n": test_prediction_integration()
    }
    
    # Generar reporte
    generate_report(results)

if __name__ == "__main__":
    main()
